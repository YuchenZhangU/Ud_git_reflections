What happens when you initialize a repository? Why do you need to do it?
    A .git file is created in the working directory. It is used to record history commit.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
    Repository is like a warehouse for commits containing all the commit history. the only way to add new record into this warehouse is the commit command.
    Commit is a part of repository. Commit command will compare whatever changes that are added in the staing area to the last commit and make a new commit which applied the all the changes. Commit, in essence, is a snapshot of the file status which let staging area overwrite the last commit. 
    Working directory is a collection of file that is possible to be recorded into repository in the form of commit. The only interface to access working file is commad add. The add command put all or part of the files into staging area which could later be commit into repository.
    Finally, the command status. Status provides us a way to check the changes that have made on working directory and staging status compared to the last commit.

How can you use the staging area to make sure you have one commit per logical
change?
    only add the logical change file in the stage and commit. You have done a lot of work at a time. But you do not want to commit all of they at a time. Because they are not logically separated. Staging area help you commit they one logical change at a time.


What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
    There are different level of logic. For very small logic, you can use add to record your change with even a commit. With a median type of logic for example fixing a bug, it would be better to make a seperate commit. For bigger logic like adapting a experimental feature or creating  a new language support you can use branch.
    Branch can also keep the code organized. If more than one people work on the same project. Each people can create there only branch.

How do the diagrams help you visualize the branch structure?
    Help me see clearly what the parent commits of each commit are. How commits are labeled to different branch. 

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
    They change of two big logical change merge into one.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
    automative commit is easy to use.